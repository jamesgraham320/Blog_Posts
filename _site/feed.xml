<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-10-30T09:04:19-04:00</updated><id>http://localhost:4000/</id><title type="html">James Graham’s dope corner</title><subtitle>Musings on code and workflow.</subtitle><entry><title type="html">Easy blog hosting with jekyll</title><link href="http://localhost:4000/2017/10/29/jgraham_blog_post_2.html" rel="alternate" type="text/html" title="Easy blog hosting with jekyll" /><published>2017-10-29T18:36:51-04:00</published><updated>2017-10-29T18:36:51-04:00</updated><id>http://localhost:4000/2017/10/29/jgraham_blog_post_2</id><content type="html" xml:base="http://localhost:4000/2017/10/29/jgraham_blog_post_2.html">&lt;h2 id=&quot;intro-to-jekyll&quot;&gt;&lt;strong&gt;Intro to Jekyll&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Contrary to popular belief, creating your own blog and hosting it is straightforward and easy. Using a ruby gem called Jekyll and github pages you can create a simple and customizable website to hold all your blogs. Documentation for Jekyll can be found &lt;a href=&quot;https://jekyllrb.com&quot;&gt;here!&lt;/a&gt; First things first, install Jekyll with ‘gem install jekyll’ to get started. After that you can generate a new website with the Jekyll new method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll_new.png&quot; alt=&quot;jekyll creation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And when you’re done, your files should look a little like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll_file_structure.png&quot; alt=&quot;jekyll file structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this point, you can add new pages to your _posts folder. The have to have a format of “yyyy-mm-dd-&amp;lt;post_name&amp;gt;” which will help jekyll to arrange your posts in date order. Now that you’re set up, we can look at some examples of Jekyll in action!&lt;/p&gt;

&lt;h2 id=&quot;markdown-or-html-lite&quot;&gt;&lt;strong&gt;Markdown (or HTML lite)&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Now that we’ve created a website and located where our posts are supposed to go, the next question is, how do we write a post? Thankfully there’s a simple way to do that with a language called Markdown. Markdown uses simple syntax and a couple of symbols to effectively generate basic HTML. One thing to note is that all HTML is valid Markdown syntax, but in this case, it isn’t necessary.
To get started with Markdown, all you have to do is end a filename with .md or .markdown. It works like a regular text file plus a couple extra options for formatting. Here’s what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/markdown_example.png&quot; alt=&quot;some markdown&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the above example, you can see the layout of a markdown file (this one in fact). At the very top is the front information for Jekyll, this tells it the page information like the layout, title and date. Below that is the body of the markdown file. Anything between ** is bold, a dashed line denotes a secondary title and so on. There’s a list of rules which show how simple it is &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;hosting-your-site-on-gitub-pages&quot;&gt;&lt;strong&gt;Hosting your site on Gitub Pages&lt;/strong&gt;&lt;/h2&gt;</content><author><name></name></author><summary type="html">Intro to Jekyll</summary></entry><entry><title type="html">Make your life easier</title><link href="http://localhost:4000/2017/10/14/jgraham_blog_post_1.html" rel="alternate" type="text/html" title="Make your life easier" /><published>2017-10-14T18:36:51-04:00</published><updated>2017-10-14T18:36:51-04:00</updated><id>http://localhost:4000/2017/10/14/jgraham_blog_post_1</id><content type="html" xml:base="http://localhost:4000/2017/10/14/jgraham_blog_post_1.html">&lt;h2 id=&quot;what-is-workflow&quot;&gt;&lt;strong&gt;What is workflow?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Workflow is defined as “the sequence of industrial, administrative, or other processes through which a piece of work passes from initiation to completion.” In our case, “other processes” refers to putting down working code to make an application. And as a series of processes, they are subject to optimization and improvement. In our case, anything that allows you to create code and applications more quickly and easily can be considered a tool for optimizing your workflow! Here are a couple of my favorite Vim plugins and their closest equivalents in atom. Hopefully there’s one here you’ve never used:&lt;/p&gt;

&lt;h2 id=&quot;fuzzy-file-finder&quot;&gt;Fuzzy File Finder&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://preview.ibb.co/gA1YVm/Screen_Shot_2017_10_17_at_8_48_05_PM.png&quot; alt=&quot;fuzzy file finder!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Despite it’s cute sounding name, fuzzy file finder is an awesome tool for searching through all of your files. Open this up and start typing at whatever you can remember and it’ll return all of the closest results. It’s not case sensitive and works on all of your inputs, going through file names and folders to always find you the best result. Shown above is what it looks like for my in Vim but there’s one totally similar &lt;a href=&quot;https://github.com/atom/fuzzy-finder&quot;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;linters&quot;&gt;Linters&lt;/h2&gt;

&lt;p&gt;Do you ever find yourself wishing you could spot pesky syntax errors before running your programs? Well now you can! Linters constantly compile your code looking for errors and showing them in a convenient format while you code. It makes finding and changing them incredibly easy and happens in real time, meaning you don’t have to run your program to find out you missed an end:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.github-camo.com/a7fa1da3b5b4bdea00b5d25591f47e0751f64d4e/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f343237383131332f32333837393933332f31616231376532612d303837322d313165372d383033642d3366653063636663363739302e676966 =500x&quot; alt=&quot;Atom Linter Github Page&quot; /&gt;
&lt;sub&gt;(Courtesy of https://atom.io/packages/linter)&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;Some editors come with this functionality built in such as Eclipse, but for the rest of us we have to go out and install it. My linter in Vim looks a little different, but they all follow the same rules. Remember to install language linter packages for the specific languages you’re working in! &lt;a href=&quot;https://atom.io/packages/linter&quot;&gt;Check it out here!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;beautify&quot;&gt;Beautify&lt;/h2&gt;

&lt;p&gt;As we stumble our way through our code trying to puzzle together something that works, it’s easy to lose track of indentation, spacing and everything else that makes your code readable. Get rid of the repetitive task of deleting extra whitespace or indenting all your line, with the press of a button beautify formats everything for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.shopify.com/s/files/1/0533/2089/files/the-best-atom-packages-2017-beautify.gif?v=1496083144&quot; alt=&quot;Atom Beautify package page&quot; /&gt;
&lt;sub&gt;(Courtesy of https://atom.io/packages/atom-beautify)&lt;/sub&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-learning-curve&quot;&gt;The learning curve&lt;/h2&gt;

&lt;p&gt;Adding new new packages, and learning new keybinds is like learning to ride a bike over and over again, and in some cases require reconditioning yourself to work with something new. Take it slowly and try to learn a few things at a time otherwise it can be overwhelming. It’s often said that once you’re proficient, try to learn one new keybind a a week. And remember, if you find something tedious and repetitive, chances are someone else felt the same way and built a package to fix exactly your needs!&lt;/p&gt;

&lt;p&gt;-James Graham&lt;/p&gt;</content><author><name></name></author><summary type="html">What is workflow?</summary></entry></feed>